START -> COMMAND_LIST
COMMAND_LIST -> COMMAND COMMAND_LIST2
COMMAND_LIST2 -> COMMAND COMMAND_LIST2 
	       | @
COMMAND -> SYSTEM_COMMAND
	 | DDL_COMMAND 
	 | DML_COMMAND
SYSTEM_COMMAND -> CREATE_DATABASE_COMMAND
		| DROP_DATABASE_COMMAND
		| COMMIT_COMMAND
		| SAVE_COMMAND
		| LOAD_DATABASE_COMMAND
DDL_COMMAND -> CREATE_TABLE_COMMAND
	     | DROP_TABLE_COMMAND
DML_COMMAND -> INSERT_INTO_COMMAND
	     | DELETE_FROM_COMMAND
	     | UPDATE_COMMAND
	     | W_UPDATE_COMMAND
	     | SELECT_COMMAND
	     | W_SELECT_COMMAND
CREATE_DATABASE_COMMAND -> create database ID ;
DROP_DATABASE_COMMAND -> drop database ID ;
SAVE_COMMAND -> save ;
LOAD_DATABASE_COMMAND -> load database ID ;
CREATE_TABLE_COMMAND -> create table ID ( FIELD_DEF_LIST ) ;
DROP_TABLE_COMMAND -> drop table ID ;
INSERT_INTO_COMMAND -> insert into ID INSERT_INTO_COMMAND2
INSERT_INTO_COMMAND2 -> ( FIELD_LIST ) VALUES ( LITERAL_LIST ) ;
		      | VALUES ( LITERAL_LIST ) ;
DELETE_FROM_COMMAND -> delete from ID DELETE_FROM_COMMAND2
DELETE_FROM_COMMAND2 -> where CONDITION ; 
		      | ;
UPDATE_COMMAND -> update ID set ID = LITERAL UPDATE_COMMAND2
UPDATE_COMMAND2 -> , ID = LITERAL UPDATE_COMMAND2
		 | UPDATE_COMMAND3
UPDATE_COMMAND3 -> where CONDITION ;
		 | ;
SELECT_COMMAND -> select * from ID ;
w_SELECT_COMMAND -> wSelect w_SELECT_COMMAND2
w_SELECT_COMMAND2 -> * from ID w_SELECT_COMMAND3
		   | ( FIELD_LIST ) from ID w_SELECT_COMMAND3
w_SELECT_COMMAND3 -> where CONDITION ;
		   | ;
FIELD_DEF_LIST -> FIELD_DEF FIELD_DEF_LIST2
FIELD_DEF_LIST2 -> , FIELD_DEF FIELD_DEF_LIST2
		 | @
FIELD_DEF -> FIELD_TYPE ID
FIELD_LIST -> ID FIELD_LIST2
FIELD_LIST2 -> , ID FIELD_LIST2
	     | @
LITERAL_LIST -> LITERAL LITERAL_LIST2
LITERAL_LIST2 -> , LITERAL LITERAL_LIST2
	       | @
CONDITION -> ID COMPARE LITERAL
COMPARE -> >
		 | <
		 | >=
		 | <=
		 | == 
		 | !=
FIELD_TYPE -> integer
		    | integer [ LITERAL ]
			| number ( LITERAL )
			| number ( LITERAL , LITERAL )
			| number
			| character( LITERAL )
			| date LITERAL / LITERAL / LITERAL


// SEMANTICS ****************
// All ID's need to be checked for whether or not the ID exists in table (for field name)
// in database (for table name) or in catalogue (for database name). ID's need to start
// with a letter and then they can include integers (and maybe underscores?)

// SAVE is actually the command to exit the program. 

// a LITERAL is an integer, decimal, date or string. For the integers and decimals no negative
// numbers are allowed

// the system will automatically include the timestamp. No user entry

// for the FIELD_TYPEs, the LITERALs in the parentheses need to be ints. For number, the first
// LITERAL indicates the maximum number of digits to the left of the decimal and the second
// LITERAL indicates the number of digits to the right of the decimal. For character and integer,
// the LITERAL just indicates the maximum number of digits or characters the field will hold. 
// For the date field type, the first LITERAL has to be two digits between 01-12, the second 
// literal has to be two digits between 01-31, and the third literal has two be exactly two or
// four digits from 0000-9999 or 00-99


// Tokens ...
create 
drop
load
save
commit
database
table
insert
into
from
where
set
delete
integer
number
character
update
select
wselect
ID
LITERAL
=
(
)
*
,
;
>
>=
<
<=
==
!=
